<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f7fa;
            color: #2d3748;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
        .card {
            background: white;
            border-radius: 8px;
            padding: 2rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .info-grid {
            display: grid;
            grid-template-columns: 200px 1fr;
            gap: 1rem;
            margin-bottom: 2rem;
        }
        .info-label {
            font-weight: 600;
            color: #718096;
        }
        .downloads {
            display: flex;
            gap: 1rem;
            margin: 2rem 0;
        }
        .download-card {
            flex: 1;
            background: #f7fafc;
            border: 2px dashed #cbd5e0;
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.2s;
        }
        .download-card:hover {
            border-color: #667eea;
            background: #edf2f7;
        }
        .download-card svg {
            width: 48px;
            height: 48px;
            margin-bottom: 1rem;
            color: #667eea;
        }
        .btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.2s;
            border: none;
            cursor: pointer;
            font-size: 1rem;
        }
        .btn-primary {
            background: #667eea;
            color: white;
        }
        .btn-primary:hover {
            background: #5a67d8;
            transform: translateY(-1px);
        }
        .btn-success {
            background: #48bb78;
            color: white;
        }
        .btn-success:hover {
            background: #38a169;
        }
        .btn-secondary {
            background: #718096;
            color: white;
        }
        .btn-block {
            display: block;
            width: 100%;
        }
        .actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-top: 2rem;
        }
        .action-card {
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 2rem;
        }
        .action-card h3 {
            margin-bottom: 1rem;
            color: #2d3748;
        }
        .action-card p {
            color: #718096;
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }
        .upload-area {
            border: 2px dashed #cbd5e0;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            margin-bottom: 1rem;
            background: #f7fafc;
            cursor: pointer;
            transition: all 0.2s;
        }
        .upload-area:hover {
            border-color: #667eea;
            background: #edf2f7;
        }
        .upload-area.dragover {
            border-color: #48bb78;
            background: #f0fff4;
        }
        #fileInput {
            display: none;
        }
        .file-selected {
            background: #d1fae5;
            color: #065f46;
            padding: 0.75rem;
            border-radius: 6px;
            margin-bottom: 1rem;
        }
        .alert {
            padding: 1rem;
            border-radius: 6px;
            margin-bottom: 1.5rem;
            display: none;
        }
        .alert-success {
            background: #c6f6d5;
            color: #22543d;
            border-left: 4px solid #48bb78;
        }
        .alert-error {
            background: #fed7d7;
            color: #742a2a;
            border-left: 4px solid #f56565;
        }
        .breadcrumb {
            margin-bottom: 2rem;
        }
        .breadcrumb a {
            color: #667eea;
            text-decoration: none;
        }
        .breadcrumb a:hover {
            text-decoration: underline;
        }
        .loading {
            display: none;
            text-align: center;
            padding: 1rem;
        }
        .loading.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="container">
            <h1>üçΩÔ∏è Menu Review Dashboard</h1>
            <p>RSH Menu Management System</p>
        </div>
    </div>
    
    <div class="container">
        <div class="breadcrumb">
            <a href="/">‚Üê Back to Dashboard</a>
        </div>
        
        <div id="alert" class="alert"></div>
        
        <div class="card">
            <h2 style="margin-bottom: 1.5rem;">Review Submission</h2>
            
            <div class="info-grid">
                <div class="info-label">Filename:</div>
                <div><strong><%= submission.filename %></strong></div>
                
                <div class="info-label">Submitter:</div>
                <div><%= submission.submitter_email %></div>
                
                <div class="info-label">Submitted:</div>
                <div><%= new Date(submission.created_at).toLocaleString() %></div>
                
                <div class="info-label">Status:</div>
                <div><span style="color: #d69e2e;">‚è≥ Pending Your Review</span></div>
            </div>
        </div>
        
        <div class="card">
            <h3 style="margin-bottom: 1.5rem;">üì• Download Documents</h3>
            <p style="color: #718096; margin-bottom: 1.5rem;">
                Download both files to compare the AI's suggested changes against the original submission.
            </p>
            
            <div class="downloads">
                <a href="/download/original/<%= submission.id %>" class="download-card">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                    </svg>
                    <h4>Original Submission</h4>
                    <p style="font-size: 0.875rem; color: #718096;">As submitted by chef</p>
                </a>
                
                <a href="/download/draft/<%= submission.id %>" class="download-card">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <h4>AI Draft (Red-lined)</h4>
                    <p style="font-size: 0.875rem; color: #718096;">AI-generated corrections</p>
                </a>
            </div>
        </div>
        
        <div class="actions">
            <!-- Option 1: Quick Approve -->
            <div class="action-card">
                <h3>‚úÖ Option 1: Approve AI Draft</h3>
                <p>
                    The AI's corrections look perfect. No additional changes needed.
                    This will send the AI draft directly to the chef.
                </p>
                <button onclick="quickApprove()" class="btn btn-success btn-block">
                    Approve & Send to Chef
                </button>
            </div>
            
            <!-- Option 2: Upload Corrections -->
            <div class="action-card">
                <h3>üìù Option 2: Upload Your Corrections</h3>
                <p>
                    You've made additional changes to the AI draft. Upload your final corrected version.
                    This helps the AI learn and improve.
                </p>
                
                <div class="upload-area" onclick="document.getElementById('fileInput').click()" 
                     ondragover="handleDragOver(event)" ondrop="handleDrop(event)">
                    <svg xmlns="http://www.w3.org/2000/svg" style="width: 48px; height: 48px; margin-bottom: 0.5rem; color: #667eea;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <p><strong>Click to upload</strong> or drag and drop</p>
                    <p style="font-size: 0.875rem; color: #718096;">Corrected .docx file</p>
                </div>
                
                <input type="file" id="fileInput" accept=".docx" onchange="handleFileSelect(event)">
                
                <div id="fileSelected" class="file-selected" style="display: none;">
                    <span id="fileName"></span>
                </div>
                
                <button onclick="uploadCorrected()" id="uploadBtn" class="btn btn-primary btn-block" disabled>
                    Upload & Send to Chef
                </button>
            </div>
        </div>
        
        <div class="loading" id="loading">
            <p>Processing... Please wait.</p>
        </div>
    </div>
    
    <script>
        let selectedFile = null;
        const submissionId = '<%= submission.id %>';
        
        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.className = 'alert alert-' + type;
            alert.textContent = message;
            alert.style.display = 'block';
            
            setTimeout(() => {
                alert.style.display = 'none';
            }, 5000);
        }
        
        function showLoading(show) {
            document.getElementById('loading').classList.toggle('show', show);
        }
        
        async function quickApprove() {
            if (!confirm('Are you sure the AI draft is perfect and ready to send to the chef?')) {
                return;
            }
            
            showLoading(true);
            
            try {
                const response = await fetch('/approve/' + submissionId, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('‚úÖ Submission approved and sent to chef!', 'success');
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 2000);
                } else {
                    showAlert('‚ùå Error: ' + data.error, 'error');
                    showLoading(false);
                }
            } catch (error) {
                showAlert('‚ùå Failed to approve submission', 'error');
                showLoading(false);
            }
        }
        
        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (file) {
                selectedFile = file;
                document.getElementById('fileName').textContent = 'üìÑ ' + file.name;
                document.getElementById('fileSelected').style.display = 'block';
                document.getElementById('uploadBtn').disabled = false;
            }
        }
        
        function handleDragOver(event) {
            event.preventDefault();
            event.currentTarget.classList.add('dragover');
        }
        
        function handleDrop(event) {
            event.preventDefault();
            event.currentTarget.classList.remove('dragover');
            
            const file = event.dataTransfer.files[0];
            if (file && file.name.endsWith('.docx')) {
                selectedFile = file;
                document.getElementById('fileName').textContent = 'üìÑ ' + file.name;
                document.getElementById('fileSelected').style.display = 'block';
                document.getElementById('uploadBtn').disabled = false;
            } else {
                alert('Please upload a .docx file');
            }
        }
        
        async function uploadCorrected() {
            if (!selectedFile) {
                alert('Please select a file first');
                return;
            }
            
            if (!confirm('Upload your corrected version? This will send it to the chef and help train the AI.')) {
                return;
            }
            
            showLoading(true);
            
            const formData = new FormData();
            formData.append('finalDocument', selectedFile);
            
            try {
                const response = await fetch('/upload/' + submissionId, {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('‚úÖ Corrected version uploaded and sent to chef!', 'success');
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 2000);
                } else {
                    showAlert('‚ùå Error: ' + data.error, 'error');
                    showLoading(false);
                }
            } catch (error) {
                showAlert('‚ùå Failed to upload corrected version', 'error');
                showLoading(false);
            }
        }
    </script>
</body>
</html>

